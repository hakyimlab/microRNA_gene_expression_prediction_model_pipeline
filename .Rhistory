beta_files = rbind(beta_files, beta_file)
# file.remove(beta_files_name)
} else {
message(paste('Warning: beta file (', beta_files_name,') does not seem to exist!', sep = ''))
}
# weights
results_files_name = paste(out_dir, 'TW_', project, '_chr', i, '_exp_', n_k_folds, '-foldCV_elasticNet_alpha', alpha, '_', snpset, '.txt', sep = '')
if (file.exists(results_files_name)){
results_file = readTextFile(results_files_name)
results_file = na.omit(results_file)  # remove NA
results_files = rbind(results_files, results_file)
# file.remove(results_files_name)
} else {
message(paste('Warning: weight file (', results_files_name,') does not seem to exist!', sep = ''))
}
# covariances
covariances_files_name = paste(out_dir, project, '_chr', i, '_snpset_', snpset, '_alpha_', alpha, '_covariances.txt', sep = '')
if (file.exists(covariances_files_name)){
covariances_file = readTextFile(covariances_files_name)
covariances_files = rbind(covariances_files, covariances_file)
# file.remove(covariances_files_name)
} else {
message(paste('Warning: covariance file (', covariances_files_name,') does not seem to exist!', sep = ''))
}
# remove workingbest file
workingbest_files_name = paste(out_dir, "working_TW_", project, '_exp_', n_k_folds, '-foldCV_elasticNet_alpha', alpha, '_', snpset, '_chr', i, '.txt', sep = '')
if (file.exists(workingbest_files_name)){
# file.remove(workingbest_files_name)
} else {
message(paste('Warning: working best file (', workingbest_files_name,') does not seem to exist!', sep = ''))
}
}
#---------------------------------
# OUTPUT ONE: 1 covariance file
#---------------------------------
colnames(covariances_files) = c('GENE', 'RSID1', 'RSID2', 'VALUE')
write.table(covariances_files, file = paste(output_data_dir, project, '_covariances.txt', sep=''), quote = FALSE, sep = ' ', row.names = FALSE)
#-------------------------------------------------------------------------------------------------------------
# OUTPUT TWO: 1 sqlite db that contains four tables including construction, extra, weights and sample info
#-------------------------------------------------------------------------------------------------------------
# setup sqlite driver and open connections
driver <- dbDriver("SQLite")
new_conn <- dbConnect(drv = driver, dbname = paste(output_data_dir, project, '_sqlite.db', sep=''))
# construction table
log_files <- log_files %>% select(chr, seed_for_cv, n_genes, alpha)
colnames(log_files) <- c('chr', 'cv_seed', 'n_genes', 'alpha')
dbWriteTable(new_conn, "construction", log_files)
dbGetQuery(new_conn, "CREATE INDEX construction_chr ON construction (chr)")
# extra table
# calculate fdr, and filter rows.
extra_df <- results_files %>% filter(gene %in% gene_annot$gene_id)
qobj <- qvalue(extra_df$pval, fdr.level = fdr_level)
extra_df$pred.perf.qval <- qobj$qvalues
extra_df$significant <- qobj$significant
extra_filtered <- extra_df %>% rename(pred.perf.pval = pval, n.snps.in.model = n.snps, pred.perf.R2 = R2) %>% filter(significant == TRUE) %>% select(-significant)
extra_filtered = extra_filtered %>% select(gene, n.snps.in.model, pred.perf.R2, pred.perf.pval, genename, pred.perf.qval)
sig_genes <- extra_filtered$gene
dbWriteTable(new_conn, "extra", extra_filtered)
dbGetQuery(new_conn, "CREATE INDEX extra_gene ON extra (gene)")
# weights table
# drop all rows pertaining to insignificant genes based fdr filtering.
colnames(beta_files) = c('gene', 'rsid', 'ref_allele', 'eff_allele', 'weight', 'alpha')
weights_filtered <- beta_files %>% filter(gene %in% sig_genes) %>% select(one_of(c("rsid", "gene", "weight", "ref_allele", "eff_allele")))
dbWriteTable(new_conn, "weights", weights_filtered)
dbGetQuery(new_conn, "CREATE INDEX weights_rsid ON weights (rsid)")
dbGetQuery(new_conn, "CREATE INDEX weights_gene ON weights (gene)")
dbGetQuery(new_conn, "CREATE INDEX weights_rsid_gene ON weights (rsid, gene)")
# sample info table
n_samples <- n_samples
n_folds_cv <- n_k_folds
snpset <- snpset
alpha <- alpha
metadata_file <- data.frame(n_samples, n_folds_cv, snpset, alpha)
colnames(metadata_file) <- c("n_samples", "n_folds_cv", "snpset", "alpha")
dbWriteTable(new_conn, "sample_info", metadata_file)
# close connections
dbDisconnect(new_conn)
}
# Author = 'Jiamao Zheng <jiamaoz@yahoo.com>'
# load R libraries
library(data.table)
library(glmnet)
library(methods)
library(dplyr)
library(qvalue)
library(RSQLite)
library(tidyverse)
library(bit64)
# arg variables
argv <- commandArgs(trailingOnly = TRUE)
# paste funtion
"%&%" <- function(a,b) paste(a, b, sep = "")
# a function used to convert data.table to data.frame
setDF <- function(x) {
if (!is.data.table(x))
stop("x must be a data.table")
setattr(x, "row.names", .set_row_names(nrow(x)))
setattr(x, "class", "data.frame")
setattr(x, "sorted", NULL)
setattr(x, ".internal.selfref", NULL)
}
# a function used to read RDS file
readRDSFile <- function(input_filename){
tryCatch(
input_data <- readRDS(input_filename),
error=function(e){
message('Error reading with file. Aborting. Detail: ', e)
}
)
return(input_data)
}
# a function used to read txt file using big.table
readTextFile <- function(input_filename){
tryCatch(
{
input_data <- fread(input_filename, fill = TRUE)
setDF(input_data)
},
error=function(e){
message('Error reading with file. Aborting. Detail:  ', e)
}
)
return(input_data)
}
# a function used to read txt file using big.table
readTableTextFile <- function(input_filename){
tryCatch(
{
input_data <-read.table(input_filename)
},
error=function(e){
message('Error reading with file. Aborting. Detail:  ', e)
}
)
return(input_data)
}
setwd('/Volumes/haky/im-lab/nas40t2/jiamaoz/results/framingham_proteomics/framingham_proteomics_args_v0.01/src/')
project = 'framingham_proteomics_protein_coding_alpha-0.5_snpset-1KG_snps_window-1e6_cv-folds-10_fdr-0.05_b27d10eb-c217-4637-a4b3-832d858124f3_2017-06-05'
gene_annot = readRDSFile('../input/gene_annotation/gencode.v26.annotation.parsed.protein_coding.RDS')
n_samples = '66'
n_k_folds = '10'
alpha = '0.5'
snpset = '1KG_snps'
fdr_level = 0
gene_type = 'protein_coding'
intermediate_out_dir = '../input/intermediate/'
output_data_dir = '../output/'
generate_outputs(project, gene_annot, n_samples, n_k_folds, alpha, snpset, fdr_level, gene_type, intermediate_out_dir, output_data_dir)
# generate outputs
# a function used to read RDS file
readRDSFile <- function(input_filename){
tryCatch(
input_data <- readRDS(input_filename),
error=function(e){
message('Error reading with file. Aborting. Detail: ', e)
}
)
return(input_data)
}
generate_outputs <- function(project, gene_annot, n_samples, n_k_folds, alpha, snpset, fdr_level, gene_type, intermediate_out_dir, output_data_dir) {
# filter what target you are interested
gene_annot <- gene_annot %>% filter(gene_type == gene_type)
# create empty data frame for each set of files (logs, beta, results, covariances)
log_files = data.frame()
beta_files = data.frame()
results_files = data.frame()
covariances_files = data.frame()
# combine all 22 individual files for each set (logs, beta, weights, covariances)
out_dir = intermediate_out_dir
for (i in 1:22){
# logs
log_files_name = paste(out_dir, project, '_chr', i, '_elasticNet_model_log.txt', sep = '')
if (file.exists(log_files_name)){
log_file = readTextFile(log_files_name)
log_files = rbind(log_files, log_file)
# file.remove(log_files_name)
} else {
message(paste('Warning: log file (', log_files_name,') does not seem to exist!', sep = ''))
}
# beta
beta_files_name = paste(out_dir, 'TW_', project, '_elasticNet_alpha', alpha, '_', snpset, '_weights_chr', i, '.txt', sep = '')
if (file.exists(beta_files_name)){
beta_file = readTextFile(beta_files_name)
beta_files = rbind(beta_files, beta_file)
# file.remove(beta_files_name)
} else {
message(paste('Warning: beta file (', beta_files_name,') does not seem to exist!', sep = ''))
}
# weights
results_files_name = paste(out_dir, 'TW_', project, '_chr', i, '_exp_', n_k_folds, '-foldCV_elasticNet_alpha', alpha, '_', snpset, '.txt', sep = '')
if (file.exists(results_files_name)){
results_file = readTextFile(results_files_name)
results_file = na.omit(results_file)  # remove NA
results_files = rbind(results_files, results_file)
# file.remove(results_files_name)
} else {
message(paste('Warning: weight file (', results_files_name,') does not seem to exist!', sep = ''))
}
# covariances
covariances_files_name = paste(out_dir, project, '_chr', i, '_snpset_', snpset, '_alpha_', alpha, '_covariances.txt', sep = '')
if (file.exists(covariances_files_name)){
covariances_file = readTextFile(covariances_files_name)
covariances_files = rbind(covariances_files, covariances_file)
# file.remove(covariances_files_name)
} else {
message(paste('Warning: covariance file (', covariances_files_name,') does not seem to exist!', sep = ''))
}
# remove workingbest file
workingbest_files_name = paste(out_dir, "working_TW_", project, '_exp_', n_k_folds, '-foldCV_elasticNet_alpha', alpha, '_', snpset, '_chr', i, '.txt', sep = '')
if (file.exists(workingbest_files_name)){
# file.remove(workingbest_files_name)
} else {
message(paste('Warning: working best file (', workingbest_files_name,') does not seem to exist!', sep = ''))
}
}
#---------------------------------
# OUTPUT ONE: 1 covariance file
#---------------------------------
colnames(covariances_files) = c('GENE', 'RSID1', 'RSID2', 'VALUE')
write.table(covariances_files, file = paste(output_data_dir, project, '_covariances.txt', sep=''), quote = FALSE, sep = ' ', row.names = FALSE)
#-------------------------------------------------------------------------------------------------------------
# OUTPUT TWO: 1 sqlite db that contains four tables including construction, extra, weights and sample info
#-------------------------------------------------------------------------------------------------------------
# setup sqlite driver and open connections
driver <- dbDriver("SQLite")
new_conn <- dbConnect(drv = driver, dbname = paste(output_data_dir, project, '_sqlite.db', sep=''))
# construction table
log_files <- log_files %>% select(chr, seed_for_cv, n_genes, alpha)
colnames(log_files) <- c('chr', 'cv_seed', 'n_genes', 'alpha')
dbWriteTable(new_conn, "construction", log_files)
dbGetQuery(new_conn, "CREATE INDEX construction_chr ON construction (chr)")
# extra table
# calculate fdr, and filter rows.
extra_df <- results_files %>% filter(gene %in% gene_annot$gene_id)
qobj <- qvalue(extra_df$pval, fdr.level = fdr_level)
extra_df$pred.perf.qval <- qobj$qvalues
extra_df$significant <- qobj$significant
extra_filtered <- extra_df %>% rename(pred.perf.pval = pval, n.snps.in.model = n.snps, pred.perf.R2 = R2) %>% filter(significant == TRUE) %>% select(-significant)
extra_filtered = extra_filtered %>% select(gene, n.snps.in.model, pred.perf.R2, pred.perf.pval, genename, pred.perf.qval)
sig_genes <- extra_filtered$gene
dbWriteTable(new_conn, "extra", extra_filtered)
dbGetQuery(new_conn, "CREATE INDEX extra_gene ON extra (gene)")
# weights table
# drop all rows pertaining to insignificant genes based fdr filtering.
colnames(beta_files) = c('gene', 'rsid', 'ref_allele', 'eff_allele', 'weight', 'alpha')
weights_filtered <- beta_files %>% filter(gene %in% sig_genes) %>% select(one_of(c("rsid", "gene", "weight", "ref_allele", "eff_allele")))
dbWriteTable(new_conn, "weights", weights_filtered)
dbGetQuery(new_conn, "CREATE INDEX weights_rsid ON weights (rsid)")
dbGetQuery(new_conn, "CREATE INDEX weights_gene ON weights (gene)")
dbGetQuery(new_conn, "CREATE INDEX weights_rsid_gene ON weights (rsid, gene)")
# sample info table
n_samples <- n_samples
n_folds_cv <- n_k_folds
snpset <- snpset
alpha <- alpha
metadata_file <- data.frame(n_samples, n_folds_cv, snpset, alpha)
colnames(metadata_file) <- c("n_samples", "n_folds_cv", "snpset", "alpha")
dbWriteTable(new_conn, "sample_info", metadata_file)
# close connections
dbDisconnect(new_conn)
}
# Author = 'Jiamao Zheng <jiamaoz@yahoo.com>'
# load R libraries
library(data.table)
library(glmnet)
library(methods)
library(dplyr)
library(qvalue)
library(RSQLite)
library(tidyverse)
library(bit64)
# arg variables
argv <- commandArgs(trailingOnly = TRUE)
# paste funtion
"%&%" <- function(a,b) paste(a, b, sep = "")
# a function used to convert data.table to data.frame
setDF <- function(x) {
if (!is.data.table(x))
stop("x must be a data.table")
setattr(x, "row.names", .set_row_names(nrow(x)))
setattr(x, "class", "data.frame")
setattr(x, "sorted", NULL)
setattr(x, ".internal.selfref", NULL)
}
# a function used to read RDS file
readRDSFile <- function(input_filename){
tryCatch(
input_data <- readRDS(input_filename),
error=function(e){
message('Error reading with file. Aborting. Detail: ', e)
}
)
return(input_data)
}
# a function used to read txt file using big.table
readTextFile <- function(input_filename){
tryCatch(
{
input_data <- fread(input_filename, fill = TRUE)
setDF(input_data)
},
error=function(e){
message('Error reading with file. Aborting. Detail:  ', e)
}
)
return(input_data)
}
# a function used to read txt file using big.table
readTableTextFile <- function(input_filename){
tryCatch(
{
input_data <-read.table(input_filename)
},
error=function(e){
message('Error reading with file. Aborting. Detail:  ', e)
}
)
return(input_data)
}
setwd('/Volumes/haky/im-lab/nas40t2/jiamaoz/results/framingham_proteomics/framingham_proteomics_args_v0.01/src/')
project = 'framingham_proteomics_protein_coding_alpha-0.5_snpset-1KG_snps_window-1e6_cv-folds-10_fdr-0.05_b27d10eb-c217-4637-a4b3-832d858124f3_2017-06-05'
gene_annot = readRDSFile('../input/gene_annotation/gencode.v26.annotation.parsed.protein_coding.RDS')
n_samples = '66'
n_k_folds = '10'
alpha = '0.5'
snpset = '1KG_snps'
fdr_level = 1
gene_type = 'protein_coding'
intermediate_out_dir = '../input/intermediate/'
output_data_dir = '../output/'
generate_outputs(project, gene_annot, n_samples, n_k_folds, alpha, snpset, fdr_level, gene_type, intermediate_out_dir, output_data_dir)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
sample(1:2016, 1)
set.seed(1)
rnorm(4)
set.seed(1)
rnorm(4)
set.seed(1)
rnorm(4)
set.seed(1)
rnorm(4)
set.seed(1)
rnorm(4)
set.seed(1)
rnorm(4)
set.seed(1)
rnorm(4)
set.seed(1)
rnorm(4)
set.seed(1)
rnorm(4)
set.seed(8)
rnorm(4)
set.seed(8)
rnorm(4)
set.seed(8)
rnorm(4)
set.seed(8)
rnorm(4)
set.seed(8)
rnorm(4)
set.seed(8)
rnorm(4)
set.seed(8)
rnorm(4)
set.seed(8)
rnorm(4)
set.seed(8)
rnorm(4)
set.seed(8)
rnorm(4)
set.seed(8)
rnorm(4)
set.seed(8)
rnorm(4)
# load libraries
library(dplyr)
library(data.table)
library(tidyverse)
library(bit64)
# a function used to convert data.table to data.frame
setDF <- function(x) {
if (!is.data.table(x))
stop("x must be a data.table")
setattr(x, "row.names", .set_row_names(nrow(x)))
setattr(x, "class", "data.frame")
setattr(x, "sorted", NULL)
setattr(x, ".internal.selfref", NULL)
}
options(scipen=0)
data = read.table('/Volumes/haky/im-lab/nas40t2/jiamaoz/results/framingham_proteomics/framingham_proteomics_args_v0.01/input/expression_phenotypes/framingham_immunoassay_prefiltered.txt')
data[1:3, 1:3]
protein_anno = fread('/Volumes/haky/im-lab/nas40t2/jiamaoz/results/framingham_proteomics/framingham_proteomics_args_v0.01/input/gene_annotation/gencode.v26.annotation.parsed.txt')
setDF(protein_anno)
head(protein_anno)
isTRUE(protein_anno$start < protein_anno$end)
protein_anno$end
require(doMC)
install.packages('doMC')
require(doMC)
library(doMC)
registerDoMC(cores=4)
require(doMC)
install.packages('doMC')
library(doMC)
require(doMC)
registerDoMC(cores=4)
library(glmnet)
set.seed(1010)
n=1000;p=100
nzc=trunc(p/10)
x=matrix(rnorm(n*p),n,p)
beta=rnorm(nzc)
fx= x[,seq(nzc)] %*% beta
eps=rnorm(n)*5
y=drop(fx+eps)
px=exp(fx)
px=px/(1+px)
ly=rbinom(n=length(px),prob=px,size=1)
set.seed(1011)
cvob1=cv.glmnet(x,y)
plot(cvob1)
coef(cvob1)
predict(cvob1,newx=x[1:5,], s="lambda.min")
title("Gaussian Family",line=2.5)
set.seed(1011)
cvob1a=cv.glmnet(x,y,type.measure="mae")
plot(cvob1a)
title("Gaussian Family",line=2.5)
set.seed(1011)
par(mfrow=c(2,2),mar=c(4.5,4.5,4,1))
cvob2=cv.glmnet(x,ly,family="binomial")
plot(cvob2)
title("Binomial Family",line=2.5)
frame()
set.seed(1011)
cvob3=cv.glmnet(x,ly,family="binomial",type.measure="class")
plot(cvob3)
title("Binomial Family",line=2.5)
set.seed(1011)
cvob3a=cv.glmnet(x,ly,family="binomial",type.measure="auc")
plot(cvob3a)
title("Binomial Family",line=2.5)
set.seed(1011)
mu=exp(fx/10)
y=rpois(n,mu)
cvob4=cv.glmnet(x,y,family="poisson")
plot(cvob4)
title("Poisson Family",line=2.5)
## Not run:
# Multinomial
n=500;p=30
nzc=trunc(p/10)
x=matrix(rnorm(n*p),n,p)
beta3=matrix(rnorm(30),10,3)
beta3=rbind(beta3,matrix(0,p-10,3))
f3=x%*% beta3
p3=exp(f3)
p3=p3/apply(p3,1,sum)
g3=rmult(p3)
set.seed(10101)
cvfit=cv.glmnet(x,g3,family="multinomial")
plot(cvfit)
title("Multinomial Family",line=2.5)
# Cox
beta=rnorm(nzc)
fx=x[,seq(nzc)]%*%beta/3
hx=exp(fx)
ty=rexp(n,hx)
tcens=rbinom(n=n,prob=.3,size=1)# censoring indicator
y=cbind(time=ty,status=1-tcens) # y=Surv(ty,1-tcens) with library(survival)
foldid=sample(rep(seq(10),length=n))
fit1_cv=cv.glmnet(x,y,family="cox",foldid=foldid)
plot(fit1_cv)
title("Cox Family",line=2.5)
# Parallel
require(doMC)
registerDoMC(cores=4)
x = matrix(rnorm(1e5 * 100), 1e5, 100)
y = rnorm(1e5)
system.time(cv.glmnet(x,y))
system.time(cv.glmnet(x,y,parallel=TRUE))
install.packages("doMC")
install.packages("glmnet")
install.packages("glmnet")
